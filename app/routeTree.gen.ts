/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as AuthedRouteImport } from './routes/_authed/~/route'
import { Route as AuthedTestImport } from './routes/_authed/~/test'
import { Route as AuthedIdImport } from './routes/_authed/~/$id'

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRouteRoute = AuthedRouteImport.update({
  id: '/~',
  path: '/~',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedTestRoute = AuthedTestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => AuthedRouteRoute,
} as any)

const AuthedIdRoute = AuthedIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AuthedRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_authed/~': {
      id: '/_authed/~'
      path: '/~'
      fullPath: '/~'
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/~/$id': {
      id: '/_authed/~/$id'
      path: '/$id'
      fullPath: '/~/$id'
      preLoaderRoute: typeof AuthedIdImport
      parentRoute: typeof AuthedRouteImport
    }
    '/_authed/~/test': {
      id: '/_authed/~/test'
      path: '/test'
      fullPath: '/~/test'
      preLoaderRoute: typeof AuthedTestImport
      parentRoute: typeof AuthedRouteImport
    }
  }
}

// Create and export the route tree

interface AuthedRouteRouteChildren {
  AuthedIdRoute: typeof AuthedIdRoute
  AuthedTestRoute: typeof AuthedTestRoute
}

const AuthedRouteRouteChildren: AuthedRouteRouteChildren = {
  AuthedIdRoute: AuthedIdRoute,
  AuthedTestRoute: AuthedTestRoute,
}

const AuthedRouteRouteWithChildren = AuthedRouteRoute._addFileChildren(
  AuthedRouteRouteChildren,
)

interface AuthedRouteChildren {
  AuthedRouteRoute: typeof AuthedRouteRouteWithChildren
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedRouteRoute: AuthedRouteRouteWithChildren,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/~': typeof AuthedRouteRouteWithChildren
  '/~/$id': typeof AuthedIdRoute
  '/~/test': typeof AuthedTestRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/~': typeof AuthedRouteRouteWithChildren
  '/~/$id': typeof AuthedIdRoute
  '/~/test': typeof AuthedTestRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_authed/~': typeof AuthedRouteRouteWithChildren
  '/_authed/~/$id': typeof AuthedIdRoute
  '/_authed/~/test': typeof AuthedTestRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/~' | '/~/$id' | '/~/test'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/~' | '/~/$id' | '/~/test'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/_authed/~'
    | '/_authed/~/$id'
    | '/_authed/~/test'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/~"
      ]
    },
    "/_authed/~": {
      "filePath": "_authed/~/route.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/~/$id",
        "/_authed/~/test"
      ]
    },
    "/_authed/~/$id": {
      "filePath": "_authed/~/$id.tsx",
      "parent": "/_authed/~"
    },
    "/_authed/~/test": {
      "filePath": "_authed/~/test.tsx",
      "parent": "/_authed/~"
    }
  }
}
ROUTE_MANIFEST_END */
